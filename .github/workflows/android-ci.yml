name: Android CI (Debug Bundle & Universal APK)

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JAVA_TOOL_OPTIONS: -Xmx3g

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install Gradle + generate wrapper
        run: |
          sudo apt-get update
          sudo apt-get install -y gradle
          gradle wrapper --gradle-version 8.7
          ./gradlew --version || true

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept SDK licenses
        run: yes | sdkmanager --licenses || true

      - name: Install SDK packages (34 & 35)
        shell: bash
        run: |
          set -euo pipefail
          pkgs=(
            "platform-tools"
            "platforms;android-34" "build-tools;34.0.0"
            "platforms;android-35" "build-tools;35.0.0"
          )
          for p in "${pkgs[@]}"; do
            echo "Installing: $p"
            for i in {1..3}; do
              if sdkmanager --install "$p"; then break; fi
              echo "Retry $i for $p..."; sleep 5
            done
          done
          yes | sdkmanager --licenses || true

      - name: Make Gradle executable
        run: chmod +x gradlew

      # Build the debug bundle + zip-apks (bundletool output)
      - name: Build debug bundle & zip apks (verbose)
        run: ./gradlew --no-daemon --stacktrace --info :app:bundleDebug :app:zipApksForDebug | tee build.log

      # Ask Gradle for :app's buildDir and list it
      - name: Print :app properties (find buildDir)
        run: ./gradlew -q :app:properties | tee app-properties.txt

      - name: Show resolved buildDir and contents
        shell: bash
        run: |
          set -euo pipefail
          echo "Grepping buildDir from properties..."
          BUILD_DIR=$(grep -E '^buildDir:' app-properties.txt | awk '{print $2}')
          echo "Resolved buildDir => ${BUILD_DIR:-<not found>}"
          if [ -n "${BUILD_DIR:-}" ]; then
            echo "Listing $BUILD_DIR:"
            ls -la "$BUILD_DIR" || true
            echo "Listing outputs under $BUILD_DIR/outputs:"
            ls -R "$BUILD_DIR/outputs" || true
            echo "APP_BUILD_DIR=$BUILD_DIR" >> "$GITHUB_ENV"
          fi

      # Build a UNIVERSAL APK from the produced debug AAB
      - name: Build universal APK from AAB
        shell: bash
        run: |
          set -euo pipefail
          AAB=""
          if [ -n "${APP_BUILD_DIR:-}" ] && [ -d "${APP_BUILD_DIR}/outputs/bundle/debug" ]; then
            AAB=$(ls "${APP_BUILD_DIR}/outputs/bundle/debug/"*.aab 2>/dev/null || true)
          fi
          if [ -z "$AAB" ]; then
            AAB=$(find . -type f -name "*-debug.aab" -o -name "app-debug.aab" | head -n 1 || true)
          fi
          if [ -z "$AAB" ]; then
            echo "No debug AAB found, skipping universal APK build."
            exit 0
          fi
          echo "Using AAB: $AAB"

          curl -L -o bundletool.jar https://github.com/google/bundletool/releases/download/1.17.2/bundletool-all-1.17.2.jar

          keytool -genkey -v \
            -keystore debug.keystore \
            -alias androiddebugkey \
            -storepass android \
            -keypass android \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -dname "CN=Android,O=Android,C=US"

          java -jar bundletool.jar build-apks \
            --bundle="$AAB" \
            --output=universal.apks \
            --mode=universal \
            --ks=debug.keystore \
            --ks-pass=pass:android \
            --ks-key-alias=androiddebugkey \
            --key-pass=pass:android

          unzip -o universal.apks -d universal_apks
          cp universal_apks/universal.apk app-universal-debug.apk
          echo "Universal APK at: $GITHUB_WORKSPACE/app-universal-debug.apk"

      # Helpful listing
      - name: List outputs
        run: |
          echo "=== Searching for outputs ==="
          echo "AABs:";  find "$GITHUB_WORKSPACE" -type f -name "*.aab" -print || true
          echo "APKs:";  find "$GITHUB_WORKSPACE" -type f -name "*.apk" -print || true
          echo "APKS:";  find "$GITHUB_WORKSPACE" -type f -name "*.apks" -print || true
          echo "Outputs dirs:"; find "$GITHUB_WORKSPACE" -type d -path "*/build/outputs/*" -print || true

      # Upload artifacts
      - name: Upload debug artifacts (AAB/APK/APKS)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts
          path: |
            ${{ env.APP_BUILD_DIR }}/outputs/bundle/debug/*.aab
            ${{ env.APP_BUILD_DIR }}/outputs/**/*.apk
            ${{ env.APP_BUILD_DIR }}/outputs/**/*.apks
            **/build/outputs/bundle/**/*.aab
            **/build/outputs/apk/**/*.apk
            **/*.apks
          if-no-files-found: warn
          retention-days: 7

      - name: Upload universal APK (if created)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: universal-apk
          path: app-universal-debug.apk
          if-no-files-found: warn
          retention-days: 7

      - name: Upload gradle logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-logs
          path: |
            build.log
            app-properties.txt
          retention-days: 7
